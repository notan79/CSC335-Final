package model;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class CardTest {
    
    // Simple test that should definitely hit the Card class code
    @Test
    public void testBasicCardAccess() {
        // This simple test should register coverage
        ArrayList<Card> cards = Card.getShuffledCards();
        assertNotNull(cards);
        assertFalse(cards.isEmpty());
        
        // Access the first card's properties to ensure code is executed
        Card firstCard = cards.get(0);
        assertNotNull(firstCard.rank);
        assertNotNull(firstCard.suit);
        assertNotNull(firstCard.toString());
    }

    // Test that the getShuffledCards method returns all 52 cards
    @Test
    public void testGetShuffledCards_ReturnsAllCards() {
        ArrayList<Card> cards = Card.getShuffledCards();
        
        // Check that we have 52 cards
        assertEquals(52, cards.size());
        
        // Check that all cards are unique (no duplicates)
        Set<Card> uniqueCards = new HashSet<>(cards);
        assertEquals(52, uniqueCards.size());
        
        // Check that we have all combinations of ranks and suits
        boolean[][] found = new boolean[Rank.values().length][Suit.values().length];
        for (Card card : cards) {
            found[card.rank.ordinal()][card.suit.ordinal()] = true;
        }
        
        for (int r = 0; r < Rank.values().length; r++) {
            for (int s = 0; s < Suit.values().length; s++) {
                assertTrue(found[r][s], 
                          "Missing card: " + Rank.values()[r] + " of " + Suit.values()[s]);
            }
        }
    }
    
    // Test that shuffle actually shuffles the cards
    @Test
    public void testGetShuffledCards_ActuallyShuffles() {
        ArrayList<Card> firstShuffle = Card.getShuffledCards();
        ArrayList<Card> secondShuffle = Card.getShuffledCards();
        
        // It's extremely unlikely (1 in 52!) that two shuffles will be identical
        boolean identical = true;
        for (int i = 0; i < firstShuffle.size(); i++) {
            if (!firstShuffle.get(i).equals(secondShuffle.get(i))) {
                identical = false;
                break;
            }
        }
        assertFalse(identical, "Cards were not shuffled");
    }
    
    // Test that each call to getShuffledCards returns a new list
    @Test
    public void testGetShuffledCards_ReturnsDifferentInstance() {
        ArrayList<Card> cards1 = Card.getShuffledCards();
        ArrayList<Card> cards2 = Card.getShuffledCards();
        
        // Check that we got two different ArrayList instances
        assertNotSame(cards1, cards2);
    }
    
    // Test the toString method
    @Test
    public void testToString() {
        ArrayList<Card> cards = Card.getShuffledCards();
        Card card = cards.get(0);
        
        assertEquals(card.rank + " ", card.toString());
    }
    
    // Test card equality (implemented via Object.equals inheritance)
    @Test
    public void testCardEquality() {
        ArrayList<Card> cards = Card.getShuffledCards();
        Card card1 = cards.get(0);
        
        // Same card reference should be equal
        assertTrue(card1.equals(card1));
        
        // Different cards should typically not be equal
        Card card2 = cards.get(1);
        if (card1.rank != card2.rank || card1.suit != card2.suit) {
            assertFalse(card1.equals(card2));
        }
        
        // Getting the shuffled cards again should give cards equal to the first set
        // (since they're all the same 52 card objects, just in different order)
        ArrayList<Card> cards2 = Card.getShuffledCards();
        boolean foundEqual = false;
        for (Card c : cards2) {
            if (card1.equals(c)) {
                foundEqual = true;
                break;
            }
        }
        assertTrue(foundEqual, "Couldn't find the same card in second shuffle");
    }
    
    // Test that static initialization created 52 cards
    @Test
    public void testStaticInitialization() {
        // We can indirectly test this by checking that getShuffledCards returns 52 cards
        ArrayList<Card> cards = Card.getShuffledCards();
        assertEquals(52, cards.size());
    }
}